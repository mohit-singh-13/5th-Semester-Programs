#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>
using namespace std;

int Optimal(vector<int> &referenceString, int numFrames)
{
    vector<int> frames(numFrames, -1);
    int pageFaults = 0;
    for (int i = 0; i < referenceString.size(); i++)
    {
        int page = referenceString[i];
        if (find(frames.begin(), frames.end(), page) == frames.end())
        {
            pageFaults++;
            int replaceIndex = -1;
            for (int j = 0; j < numFrames; j++)
            {
                int nextPage = referenceString.size();
                for (int k = i + 1; k < referenceString.size(); k++)
                {
                    if (frames[j] == referenceString[k])
                    {
                        nextPage = k;
                        break;
                    }
                }
                if (nextPage > replaceIndex)
                {
                    replaceIndex = j;
                }
            }
            frames[replaceIndex] = page;
        }
    }
    return pageFaults;
}

int main()
{
    vector<int> referenceString = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    
    int numFrames = 4;
    int optimalFaults = Optimal(referenceString, numFrames);
    
    cout << "Page Faults with Optimal: " << optimalFaults << endl;
    
    return 0;
}