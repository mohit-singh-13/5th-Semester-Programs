#include <iostream>
#include <queue>
#include <unordered_set>
using namespace std;

void fifoPageReplacement(int frames, const vector<int> &pageRequests)
{
    queue<int> pageQueue;       // Queue to store page frames
    unordered_set<int> pageSet; // Set to check presence of a page in frames
    int pageFaults = 0;
    int pageHits = 0;

    cout << "Page Replacement Steps : " << endl;
    for (int page : pageRequests)
    {
        cout << "Page " << page << " : ";
        if (pageSet.find(page) == pageSet.end()) // Check if the page is not in the frame
        {
            if (pageQueue.size() == frames) // If the queue is full, remove the oldest page
            {
                int oldestPage = pageQueue.front();
                pageQueue.pop();
                pageSet.erase(oldestPage);
                cout << "MISS (Page " << oldestPage << " evicted) ";
            }
            pageQueue.push(page); // Add the new page to the frame
            pageSet.insert(page);
            pageFaults++;
            cout << "FAULT (Page " << page << " loaded)";
        }
        else
        {
            pageHits++;
            cout << "HIT";
        }
        cout << endl;
    }
    cout << endl;

    cout << "Number of Page Faults : " << pageFaults << endl;
    cout << "Number of Page Hits : " << pageHits << endl;
    cout << endl;

    cout << "Hit Ratio : " << (pageHits * 100) / pageRequests.size() << "%" << endl;
    cout << "Miss Ratio : " << (pageFaults * 100) / pageRequests.size() << "%" << endl << endl;
}

int main()
{
    int frames, n;
    cout << "Enter the number of frames : ";
    cin >> frames;
    cout << "Enter the number of page requests : ";
    cin >> n;
    cout << endl;

    vector<int> pageRequests(n);
    cout << "Enter the page requests : ";
    for (int i = 0; i < n; ++i)
    {
        cin >> pageRequests[i];
    }
    cout << endl;

    fifoPageReplacement(frames, pageRequests);
    
    return 0;
}