#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

struct Process
{
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

int main()
{
    int n, time_quantum;
    cout << "Enter the number of processes: ";
    cin >> n;
    cout << endl;

    vector<Process> processes(n);
    
    cout << "Enter arrival time and burst time for each process:" << endl;
    for (int i = 0; i < n; i++)
    {
        processes[i].id = i + 1;
        cout << "Process " << i + 1 << ": ";
        cin >> processes[i].arrival_time >> processes[i].burst_time;
        processes[i].remaining_time = processes[i].burst_time;
    }
    cout << endl;
    
    cout << "Enter the time quantum: ";
    cin >> time_quantum;
    
    queue<Process> ready_queue;
    int current_time = 0;
    int completed_processes = 0;
    while (completed_processes < n)
    {
        for (int i = 0; i < n; i++)
        {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0)
            {
                int execute_time = min(time_quantum, processes[i].remaining_time);
                processes[i].remaining_time -= execute_time;
                current_time += execute_time;
                if (processes[i].remaining_time == 0)
                {
                    completed_processes++;
                    processes[i].completion_time = current_time;
                    processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
                }
                ready_queue.push(processes[i]);
            }
        }
        if (!ready_queue.empty())
        {
            Process next_process = ready_queue.front();
            ready_queue.pop();
            ready_queue.push(next_process);
        }
        else
        {
            int next_arrival = INT_MAX;
            for (int i = 0; i < n; i++)
            {
                if (processes[i].remaining_time > 0 && processes[i].arrival_time < next_arrival)
                {
                    next_arrival = processes[i].arrival_time;
                }
            }
            current_time = next_arrival;
        }
    }

    cout << "\nP.\tBT\tCT\tTAT\tWT\n";
    for (int i = 0; i < n; i++)
    {
        cout << processes[i].id << "\t" << processes[i].burst_time << "\t" << processes[i].completion_time
             << "\t" << processes[i].turnaround_time << "\t" << processes[i].waiting_time << endl;
    }

    // Calculate average turnaround time and average waiting time
    float total_turnaround_time = 0, total_waiting_time = 0;
    for (int i = 0; i < n; i++)
    {
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
    }

    float average_turnaround_time = total_turnaround_time / n;
    float average_waiting_time = total_waiting_time / n;
    cout << "\nAverage Turnaround Time: " << average_turnaround_time << endl;
    cout << "Average Waiting Time: " << average_waiting_time << endl << endl;
    
    return 0;
}