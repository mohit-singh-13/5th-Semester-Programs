#include <bits/stdc++.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
using namespace std;

class Buffer
{
private:
    int items;
    int maxCapacity;
    sem_t notEmpty, notFull;
    mutex mtx;

public:
    Buffer(int capacity) : items(0), maxCapacity(capacity)
    {
        sem_init(&notEmpty, 0, 0);
        sem_init(&notFull, 0, capacity);
    }

    ~Buffer()
    {
        sem_destroy(&notEmpty);
        sem_destroy(&notFull);
    }

    void produce()
    {
        sem_wait(&notFull);
        {
            lock_guard<mutex> lock(mtx);
            cout << "Producer produces item. Items Present = " << ++items << endl;
        }
        sem_post(&notEmpty);
        sleep(rand() % 100 * 0.01);
    }

    void consume()
    {
        sem_wait(&notEmpty);
        {
            lock_guard<mutex> lock(mtx);
            cout << "Consumer consumes item. Items Present = " << --items << endl;
        }
        sem_post(&notFull);
        sleep(rand() % 100 * 0.01);
    }

    bool isFull()
    {
        return items == maxCapacity;
    }

    bool isEmpty()
    {
        return items == 0;
    }
};

void *produce(void *arg)
{
    Buffer *buffer = static_cast<Buffer *>(arg);
    while (!buffer->isFull())
    {
        buffer->produce();
    }
    pthread_exit(NULL);
}

void *consume(void *arg)
{
    Buffer *buffer = static_cast<Buffer *>(arg);
    while (!buffer->isEmpty())
    {
        buffer->consume();
    }
    pthread_exit(NULL);
}

int main()
{
    int capacity;
    cout << "Enter the capacity of the buffer: ";
    cin >> capacity;

    Buffer buffer(capacity);

    // thread declaration
    pthread_t producer, consumer;

    // Creation of process
    int r1 = pthread_create(&producer, nullptr, produce, &buffer);
    if (r1)
    {
        cerr << "Error in creating producer thread" << endl;
        exit(EXIT_FAILURE);
    }

    int r2 = pthread_create(&consumer, nullptr, consume, &buffer);
    if (r2)
    {
        cerr << "Error in creating consumer thread" << endl;
        exit(EXIT_FAILURE);
    }

    // Joining the thread
    r1 = pthread_join(producer, nullptr);
    if (r1)
    {
        cerr << "Error in joining producer thread" << endl;
        exit(EXIT_FAILURE);
    }

    r2 = pthread_join(consumer, nullptr);
    if (r2)
    {
        cerr << "Error in joining consumer thread" << endl;
        exit(EXIT_FAILURE);
    }

    return 0;
}
