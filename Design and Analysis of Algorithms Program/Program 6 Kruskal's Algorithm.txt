#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

// Structure to represent an edge in the graph
struct Edge
{
    int src, dest, weight;
};

class Graph
{
public:
    int vertices;
    vector<Edge> edges;
    Graph(int v) : vertices(v) {}

    // Function to add an edge to the graph
    void addEdge(int src, int dest, int weight)
    {
        Edge edge = {src, dest, weight};
        edges.push_back(edge);
    }
    // Function to find the parent of a vertex
    int findParent(vector<int> &parent, int i)
    {
        if (parent[i] == -1)
            return i;
        return findParent(parent, parent[i]);
    }
    // Function to perform union of two subsets
    void unionSets(vector<int> &parent, int x, int y)
    {
        int xset = findParent(parent, x);
        int yset = findParent(parent, y);
        parent[xset] = yset;
    }
    // Function to implement Kruskal's algorithm for finding MST
    void kruskalMST()
    {
        vector<Edge> result; // To store the MST edges
        sort(edges.begin(), edges.end(), [](Edge a, Edge b)
             { return a.weight < b.weight; });
        vector<int> parent(vertices, -1);
        for (const Edge &edge : edges)
        {
            int x = findParent(parent, edge.src);
            int y = findParent(parent, edge.dest);
            if (x != y) // Include the edge in the result if it doesn't form a cycle
            {
                result.push_back(edge);
                unionSets(parent, x, y);
            }
        }
        // Print the MST edges
        cout << "Minimum Spanning Tree (MST) edges:\n";
        for (const Edge &edge : result)
        {
            cout << edge.src << " - " << edge.dest << " : " << edge.weight << endl;
        }
    }
};

int main()
{
    Graph g(4);
    
    g.addEdge(0, 1, 10);
    g.addEdge(0, 2, 6);
    g.addEdge(0, 3, 5);
    g.addEdge(1, 3, 15);
    g.addEdge(2, 3, 4);
    g.kruskalMST();
    
    return 0;
}
