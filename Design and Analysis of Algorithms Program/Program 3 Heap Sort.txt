#include <iostream>
#include <vector>
using namespace std;

void heapify(vector<int> &arr, int n, int i) {
    int largest = i;                          // Initialize largest as root
    int left = 2 * i + 1;                     // Left child
    int right = 2 * i + 2;                    // Right child

    if (left < n && arr[left] > arr[largest]) // If left child is larger than root
        largest = left;

    if (right < n && arr[right] > arr[largest]) // If r.child is larger than largest so far
        largest = right;
        
    // If largest is not root
    if (largest != i) // If largest is not root
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest); // Recursively heapify the affected sub-tree
    }
}

void heapSort(vector<int> &arr) {
    int n = arr.size();

    for (int i = n / 2 - 1; i >= 0; i--) // Build heap (rearrange array)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) // One by one extract an element from the heap
    {
        swap(arr[0], arr[i]); // Move current root to end
        heapify(arr, i, 0);   // Call max heapify on the reduced heap
    }
}

int main() {
    vector<int> arr = {99, -5, 8, 0, 13, 5, 6, 9, -200, 40};
    int n = arr.size();
    
    cout << "Original array: ";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    heapSort(arr);
    
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    } 
    cout << endl << endl;
    
    return 0;
}