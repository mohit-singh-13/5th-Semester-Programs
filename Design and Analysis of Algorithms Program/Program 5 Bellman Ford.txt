#include <iostream>
#include <vector>
#include <climits>
using namespace std;

struct Edge
{
    int src, dest, weight;
};

void bellmanFord(vector<Edge> &edges, int V, int E, int source)
{
    vector<int> distance(V, INT_MAX); // Create an array to store the shortest distances
    distance[source] = 0;             // Set the distance of the source vertex to itself as 0
    for (int i = 1; i <= V - 1; ++i)  // Relax edges |V| - 1 times
    {
        for (int j = 0; j < E; ++j) // Iterate through all edges
        {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;
            if (distance[u] != INT_MAX && distance[u] + w < distance[v]) // Relax the edge
            {
                distance[v] = distance[u] + w;
            }
        }
    }
    for (int i = 0; i < E; ++i) // Check for negative-weight cycles
    {
        int u = edges[i].src;
        int v = edges[i].dest;
        int w = edges[i].weight;
        if (distance[u] != INT_MAX && distance[u] + w < distance[v])
        {
            cout << "Graph contains negative-weight cycle. Cannot find shortest paths." << endl;
            return;
        }
    }

    cout << "Vertex\tDistance from Source" << endl;
    for (int i = 0; i < V; ++i)
    {
        cout << i << "\t\t" << distance[i] << endl;
    }
}

int main()
{
    vector<Edge> edges = {
        {0, 1, 4},
        {0, 2, 5},
        {1, 2, -2},
        {1, 3, 6},
        {2, 3, 1}
    };
    int V = 4; // Number of vertices and edges in the graph
    int E = edges.size();
    int source = 0;           // Source vertex

    bellmanFord(edges, V, E, source); // Perform Bellman-Ford algorithm
    cout << endl;
    
    return 0;
}