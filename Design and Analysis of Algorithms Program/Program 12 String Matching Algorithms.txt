#include<iostream>
#include<vector>
using namespace std;

// Naive String Matching Algorithm
void naiveStringMatching(const string &text, const string &pattern)
{
    int n = text.length();
    int m = pattern.length();
    for (int i = 0; i <= n - m; ++i)
    {
        int j;
        for (j = 0; j < m; ++j)
        {
            if (text[i + j] != pattern[j])
                break;
        }
        if (j == m)
        {
            cout << "Naive String Matching found at index " << i << endl;
        }
    }
}

// Rabin-Karp Algorithm
void rabinKarp(const string &text, const string &pattern, int prime = 101)
{
    int n = text.length();
    int m = pattern.length();
    int p = 0; // Hash value for pattern
    int t = 0; // Hash value for current window in text
    int h = 1;

    for (int i = 0; i < m - 1; ++i)
    { // Calculate h: (prime^(m-1)) % m
        h = (h * prime) % m;
    }

    for (int i = 0; i < m; ++i)
    { // Calculate initial hash values
        p = (prime * p + pattern[i]) % m;
        t = (prime * t + text[i]) % m;
    }

    for (int i = 0; i <= n - m; ++i)
    { // Slide the pattern over the text and check for a match
        if (p == t)
        {
            int j;
            for (j = 0; j < m; ++j)
            {
                if (text[i + j] != pattern[j])
                    break;
            }
            if (j == m)
            {
                cout << "Rabin-Karp found at index " << i << endl;
            }
        }
        if (i < n - m)
        { // Calculate hash value for the next window in text
            t = (prime * (t - text[i] * h) + text[i + m]) % m;
            if (t < 0)
            { // Handle negative hash values
                t += m;
            }
        }
    }
}

// Knuth-Morris-Pratt Algorithm
void computeLPS(const string &pattern, vector<int> &lps)
{
    int m = pattern.length();
    int len = 0;
    int i = 1;

    while (i < m)
    {
        if (pattern[i] == pattern[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0)
            {
                len = lps[len - 1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void kmp(const string &text, const string &pattern)
{
    int n = text.length();
    int m = pattern.length();
    vector<int> lps(m, 0);

    computeLPS(pattern, lps);
    int i = 0; // Index for text
    int j = 0; // Index for pattern
    
    while (i < n)
    {
        if (pattern[j] == text[i])
        {
            i++;
            j++;
        }
        if (j == m)
        {
            cout << "KMP found at index " << i - j << endl;
            j = lps[j - 1];
        }
        else if (i < n && pattern[j] != text[i])
        {
            if (j != 0)
            {
                j = lps[j - 1];
            }
            else
            {
                i++;
            }
        }
    }
}

int main()
{
    string text = "ABABCABABABCABABC";
    string pattern = "ABABC";

    cout << "Text: " << text << endl;
    cout << "Pattern: " << pattern << endl;
    
    cout << "\nNaive String Matching:\n";
    naiveStringMatching(text, pattern);
    
    cout << "\nRabin-Karp Algorithm:\n";
    rabinKarp(text, pattern);
    
    cout << "\nKnuth-Morris-Pratt Algorithm:\n";
    kmp(text, pattern);
    cout << endl;
    
    return 0;
}