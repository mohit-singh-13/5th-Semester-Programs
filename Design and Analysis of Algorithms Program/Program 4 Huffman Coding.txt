#include <iostream>
#include <unordered_map>
#include <queue>
using namespace std;

struct Node // Huffman tree node
{
    char data;
    unsigned frequency;
    Node *left, *right;
    Node(char data, unsigned frequency) : data(data), frequency(frequency), left(nullptr), right(nullptr) {}
};

struct compare // Comparison function for the priority queue
{
    bool operator()(Node *l, Node *r) {
        return l->frequency > r->frequency;
    }
};

Node *buildHuffmanTree(unordered_map<char, unsigned> &freq) // Function to build Huffman Tree
{
    priority_queue<Node *, vector<Node *>, compare> pq;

    for (auto &it : freq) // Create a node for each character and add it to the priority queue
    {
        pq.push(new Node(it.first, it.second));
    }

    while (pq.size() != 1) // Build the Huffman Tree
    {
        Node *left = pq.top();
        pq.pop();
        Node *right = pq.top();
        pq.pop();
        Node *newNode = new Node('$', left->frequency + right->frequency);
        newNode->left = left;
        newNode->right = right;
        pq.push(newNode);
    }

    return pq.top();
}

// Traverse the Huffman Tree and store the codes in a map
void buildHuffmanCodes(Node *root, string code, unordered_map<char, string> &huffmanCode) {
    if (root) {
        if (!root->left && !root->right) {
            huffmanCode[root->data] = code;
        }

        buildHuffmanCodes(root->left, code + "0", huffmanCode);
        buildHuffmanCodes(root->right, code + "1", huffmanCode);
    }
}

string huffmanCoding(string text) // Function to perform Huffman coding and return the encoded string
{
    unordered_map<char, unsigned> freq;

    for (char c : text) // Calculate the frequency of each character in the text
    {
        freq[c]++;
    }

    Node *root = buildHuffmanTree(freq);     // Build the Huffman Tree
    unordered_map<char, string> huffmanCode; // Build the Huffman Codes
    buildHuffmanCodes(root, "", huffmanCode);
    string encodedText = ""; // Generate the encoded string
    
    for (char c : text) {
        encodedText += huffmanCode[c];
    }

    return encodedText;
}

int main() {
    string text = "Mohit Singh";
    string encodedText = huffmanCoding(text); // Perform Huffman Coding

    cout << "Original text: " << text << endl;
    cout << "Huffman encoded text: " << encodedText << endl << endl;
    
    return 0;
}