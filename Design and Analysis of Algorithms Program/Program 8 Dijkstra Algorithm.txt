#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;
#define INF INT_MAX

class Graph
{
public:
    int vertices;
    vector<vector<pair<int, int>>> adjList; // {destination, weight}

    Graph(int v) : vertices(v), adjList(v) {}

    void addEdge(int u, int v, int w)
    {
        adjList[u].push_back({v, w});
        adjList[v].push_back({u, w}); // for undirected graph
    }

    void dijkstra(int source)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; //{distance, vertex}
        vector<int> dist(vertices, INF);
        pq.push({0, source});
        dist[source] = 0;
        while (!pq.empty())
        {
            int u = pq.top().second;
            pq.pop();
            for (auto &neighbor : adjList[u])
            {
                int v = neighbor.first;
                int weight = neighbor.second;
                if (dist[u] + weight < dist[v])
                {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
            
            // Print the distances from the source
            cout << "Shortest distances from the source vertex " << source << ":\n";
            for (int i = 0; i < vertices; ++i)
            {
                cout << "To vertex " << i << ": " << dist[i] << endl;
            }
        }
    }
};

int main() {
    int vertices = 6;
    Graph g(vertices);

    g.addEdge(0, 1, 2);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 7);
    g.addEdge(2, 4, 3);
    g.addEdge(3, 5, 1);
    g.addEdge(4, 5, 5);
    
    int source = 0;
    g.dijkstra(source);
    
    return 0;
}