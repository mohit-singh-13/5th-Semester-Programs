#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;

struct Edge
{
    int dest, weight;
};

class Graph
{
public:
    int vertices;
    vector<vector<Edge>> adjList;
    Graph(int v) : vertices(v), adjList(v) {}

    void addEdge(int src, int dest, int weight)
    {
        Edge edge = {dest, weight};
        adjList[src].push_back(edge);
        edge.dest = src; // For an undirected graph
        adjList[dest].push_back(edge);
    }

    void primMST()
    {
        vector<int> key(vertices, INT_MAX);
        vector<int> parent(vertices, -1);
        vector<bool> inMST(vertices, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        key[0] = 0;
        pq.push({0, 0}); // {key, vertex}
        while (!pq.empty())
        {
            int u = pq.top().second;
            pq.pop();
            inMST[u] = true;
            for (const Edge &edge : adjList[u])
            {
                int v = edge.dest;
                int weight = edge.weight;
                if (!inMST[v] && weight < key[v])
                {
                    key[v] = weight;
                    pq.push({key[v], v});
                    parent[v] = u;
                }
            }
        }
        cout << "\nPrim's MST edges:\n";
        for (int i = 1; i < vertices; i++)
        {
            cout << parent[i] << " - " << i << " : " << key[i] << endl;
        }
    }
};

int main()
{
    Graph g(5);
    
    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);
    g.addEdge(3, 4, 9);

    cout << "Graph edges:\n";
    for (int i = 0; i < g.vertices; i++)
    {
        for (const Edge &edge : g.adjList[i])
        {
            cout << i << " - " << edge.dest << " : " << edge.weight << endl;
        }
    }

    g.primMST();

    return 0;
}
